apply plugin: 'build-version'


buildscript {
    repositories {
       maven {
            url 'https://geonet.artifactoryonline.com/geonet/public-releases'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'nz.org.geonet', name: 'gradle-build-version-plugin', version: '1.0.4'
    }
}

task(tagSubs) << {
  if (isRelease) {
    def updatedCompose
    File dockerCompose = file('docker-compose.yml')
    updatedCompose = dockerCompose.text.replaceAll(/(image:[^:]*)(:latest)/,"\$1:$project.version")
    dockerCompose.write(updatedCompose)
    FileTree tree = fileTree(dir: project.projectDir, includes: ["**/Dockerfile"])
    tree.each {File file ->
      if (file.text.contains(versionToBeUpdated)) {
        def updated = file.text.replaceAll(prereleaseVersion,project.version)
        file.write(updated)
      }
    }
  }
}

task(snapSubs) << {
  if (isRelease) {
    def updatedCompose
    File dockerCompose = file('docker-compose.yml')
    updatedCompose = dockerCompose.text.replaceAll(/(image:[^:]*)(:$project.version)/,"\$1:latest")
    dockerCompose.write(updatedCompose)
    FileTree tree = fileTree(dir: project.projectDir, includes: ["**/Dockerfile"])
    tree.each {File file ->
      if (file.text.contains(versionToBeUpdated)) {
        def updated = file.text.replaceAll(project.version,postreleaseVersion)
        file.write(updated)
      }
    }
  }
}

task(printVersion) << {
  println "bv = $buildVersion.version"
  println "is = $buildVersion.isRelease"
}


allprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
        jcenter()
    }

    version = buildVersion.version
    buildVersion {
        integrationVersion = false
    }
    //clean.dependsOn updateSubs
    //clean.finalizedBy snapSubs
    clean.dependsOn printVersion
}
